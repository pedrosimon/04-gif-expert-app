{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","img","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMAgCeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,sBAAMC,SAbY,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAChCR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQZ,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,aCUZG,EAdK,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACbC,EAAeD,EAAfC,MAAOC,EAAQF,EAARE,IACf,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCRGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIGG,MAAMR,GAJT,cAIfS,EAJe,gBAKEA,EAAUC,OALZ,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACf,GAAS,IAAD,EAC7B,MAAO,CACLgB,GAAIhB,EAAIgB,GACRf,MAAOD,EAAIC,MACXC,IAAG,UAAEF,EAAIiB,cAAN,aAAE,EAAYC,iBAAiBhB,QAXjB,kBAedY,GAfc,4CAAH,sDCwBLK,EAnBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACjB,ECJ0B,SAACA,GAC3B,MAA0BrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPT,KAAMY,EACNL,SAAS,MAEV,WAEJ,CAACb,IAEGc,EDbyBM,CAAapB,GAA/BkB,EAAd,EAAQZ,KAAYO,EAApB,EAAoBA,QACpB,OACE,eAAC,WAAD,WACE,6BAAKb,IACJa,GAAW,mBAAGjB,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SACGsB,EAAKV,KAAI,SAACf,GAAD,OACR,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIgB,aEmBjBY,EA5BM,WACnB,MAAoC1C,mBAAS,CAC3C,cADF,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAIA,OACE,eAAC,WAAD,WACE,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACG4C,EAAWd,KAAI,SAACR,EAAUuB,GACzB,OACE,cAAC,EAAD,CAEAvB,SAAUA,GADLA,YCPFwB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.0d72e920.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit =(e) => {\r\n\t  e.preventDefault();\r\n\r\n\t  if (inputValue.trim().length > 2) {\r\n\t\tsetCategories(cats => [inputValue,...cats])\r\n\t\tsetInputValue('');\r\n\t  }\r\n\t  \r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GifGridItem = ({ img }) => {\r\n  const { title, url } = img;\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  img: PropTypes.object,\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=ajwEAGGFeCfvpBw3oSad3vRdRyRdvTTD`;\r\n  const respuesta = await fetch(url);\r\n  const { data } = await respuesta.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: imgs, loading } = useFetchGifs(category);\r\n  return (\r\n    <Fragment>\r\n      <h3>{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {imgs.map((img) => (\r\n          <GifGridItem key={img.id} img={img} />\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 1500);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n//import PropTypes from \"prop-types\";\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"One Punch\",\r\n  ]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((category, i) => {\r\n          return (\r\n            <GifGrid \r\n            key={category}\r\n            category={category} \r\n            />\r\n          );\r\n        })}\r\n      </ol>\r\n    </Fragment>\r\n  );\r\n};\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}